// Sass mixins for reusable styling patterns
// These mixins help maintain consistency and reduce code duplication

// Import dependencies
@use 'variables' as *;
@use 'colors' as *;
@use 'spacing' as *;

// Responsive breakpoint mixins
@mixin breakpoint($size) {
  @media (max-width: #{breakpoint($size)}) {
    @content;
  }
}

@mixin breakpoint-up($size) {
  @media (min-width: #{breakpoint($size)}) {
    @content;
  }
}

@mixin breakpoint-between($min, $max) {
  @media (min-width: #{breakpoint($min)}) and (max-width: #{breakpoint($max)}) {
    @content;
  }
}

// Typography mixins
@mixin font-size($size) {
  font-size: map-get($font-sizes, $size);
}

@mixin line-height($height) {
  line-height: map-get($line-heights, $height);
}

@mixin text-style($size: base, $weight: normal, $height: normal) {
  @include font-size($size);
  font-weight: $weight;
  @include line-height($height);
}

// Truncate text with ellipsis
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Multi-line text truncation
@mixin line-clamp($lines) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Button mixins
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border: none;
  border-radius: map-get($border-radius, md);
  font-family: inherit;
  font-weight: $font-weight-medium;
  text-decoration: none;
  cursor: pointer;
  transition: all map-get($transitions, base) map-get($easing, ease-in-out);
  
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  &:focus {
    outline: 2px solid var(--border-focus);
    outline-offset: 2px;
  }
}

@mixin button-size($size: md) {
  @if $size == sm {
    padding: space(2) space(3);
    @include font-size(sm);
    min-height: space(8);
  } @else if $size == md {
    padding: space(2.5) space(4);
    @include font-size(base);
    min-height: space(10);
  } @else if $size == lg {
    padding: space(3) space(6);
    @include font-size(lg);
    min-height: space(12);
  }
}

@mixin button-variant($variant: primary) {
  @if $variant == primary {
    background-color: var(--primary);
    color: var(--text-inverse);
    
    &:hover:not(:disabled) {
      background-color: var(--primary-hover);
    }
    
    &:active:not(:disabled) {
      background-color: var(--primary-dark);
    }
  } @else if $variant == secondary {
    background-color: transparent;
    color: var(--text-primary);
    border: 1px solid var(--border);
    
    &:hover:not(:disabled) {
      background-color: var(--bg-secondary);
      border-color: var(--border-secondary);
    }
    
    &:active:not(:disabled) {
      background-color: var(--bg-tertiary);
    }
  } @else if $variant == ghost {
    background-color: transparent;
    color: var(--text-primary);
    
    &:hover:not(:disabled) {
      background-color: var(--bg-secondary);
    }
    
    &:active:not(:disabled) {
      background-color: var(--bg-tertiary);
    }
  }
}

// Card mixins
@mixin card-base {
  background-color: var(--surface);
  border: 1px solid var(--border);
  border-radius: map-get($border-radius, lg);
  box-shadow: map-get($shadows, sm);
  transition: box-shadow map-get($transitions, base) map-get($easing, ease-in-out);
}

@mixin card-hover {
  &:hover {
    box-shadow: map-get($shadows, md);
  }
}

@mixin card-padding($size: md) {
  @if $size == sm {
    padding: var(--card-padding);
  } @else if $size == md {
    padding: space(6);
  } @else if $size == lg {
    padding: space(8);
  }
}

// Form input mixins
@mixin input-base {
  width: 100%;
  padding: space(2.5) space(3);
  border: 1px solid var(--border);
  border-radius: map-get($border-radius, md);
  background-color: var(--surface);
  color: var(--text-primary);
  font-family: inherit;
  font-size: map-get($font-sizes, base);
  line-height: map-get($line-heights, normal);
  transition: all map-get($transitions, base) map-get($easing, ease-in-out);
  
  &::placeholder {
    color: var(--text-tertiary);
  }
  
  &:focus {
    outline: none;
    border-color: var(--border-focus);
    box-shadow: 0 0 0 3px rgba(var(--primary), 0.1);
  }
  
  &:disabled {
    background-color: var(--bg-secondary);
    color: var(--text-disabled);
    cursor: not-allowed;
  }
  
  &.error {
    border-color: var(--error);
    
    &:focus {
      border-color: var(--error);
      box-shadow: 0 0 0 3px var(--error-alpha);
    }
  }
}

// Badge mixins
@mixin badge-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: map-get($border-radius, full);
  font-weight: $font-weight-medium;
  white-space: nowrap;
}

@mixin badge-size($size: md) {
  @if $size == sm {
    padding: space(1) space(2);
    @include font-size(xs);
    min-height: space(5);
  } @else if $size == md {
    padding: space(1.5) space(2.5);
    @include font-size(sm);
    min-height: space(6);
  } @else if $size == lg {
    padding: space(2) space(3);
    @include font-size(base);
    min-height: space(8);
  }
}

@mixin badge-variant($variant: primary) {
  @if $variant == primary {
    background-color: var(--primary-light);
    color: var(--primary-dark);
  } @else if $variant == success {
    background-color: var(--success-bg);
    color: var(--success);
  } @else if $variant == warning {
    background-color: var(--warning-bg);
    color: var(--warning);
  } @else if $variant == error {
    background-color: var(--error-bg);
    color: var(--error);
  } @else if $variant == info {
    background-color: var(--info-bg);
    color: var(--info);
  } @else if $variant == neutral {
    background-color: var(--bg-tertiary);
    color: var(--text-secondary);
  }
}

// Layout mixins
@mixin container($max-width: lg) {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--content-padding);
  padding-right: var(--content-padding);
  
  @if $max-width == sm {
    max-width: $container-sm;
  } @else if $max-width == md {
    max-width: $container-md;
  } @else if $max-width == lg {
    max-width: $container-lg;
  } @else if $max-width == xl {
    max-width: $container-xl;
  } @else if $max-width == 2xl {
    max-width: $container-2xl;
  }
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin grid-auto-fit($min-width: 250px, $gap: var(--gap-default)) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  gap: $gap;
}

// Utility mixins
@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

@mixin focus-ring {
  &:focus {
    outline: 2px solid var(--border-focus);
    outline-offset: 2px;
  }
}

@mixin hover-lift {
  transition: transform map-get($transitions, base) map-get($easing, ease-out);
  
  &:hover {
    transform: translateY(-2px);
  }
}

// Animation mixins
@mixin fade-in($duration: map-get($transitions, base)) {
  animation: fade-in $duration map-get($easing, ease-out);
}

@mixin slide-in-up($duration: map-get($transitions, base)) {
  animation: slide-in-up $duration map-get($easing, ease-out);
}

@mixin pulse($duration: 2s) {
  animation: pulse $duration map-get($easing, ease-in-out) infinite;
}

// Keyframe animations
@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slide-in-up {
  from {
    opacity: 0;
    transform: translateY(space(4));
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

// Responsive spacing mixins
@mixin responsive-padding($property: padding, $base: 4, $sm: null, $md: null, $lg: null, $xl: null) {
  #{$property}: space($base);
  
  @if $sm {
    @include breakpoint-up(sm) {
      #{$property}: space($sm);
    }
  }
  
  @if $md {
    @include breakpoint-up(md) {
      #{$property}: space($md);
    }
  }
  
  @if $lg {
    @include breakpoint-up(lg) {
      #{$property}: space($lg);
    }
  }
  
  @if $xl {
    @include breakpoint-up(xl) {
      #{$property}: space($xl);
    }
  }
}

@mixin responsive-margin($property: margin, $base: 4, $sm: null, $md: null, $lg: null, $xl: null) {
  #{$property}: space($base);
  
  @if $sm {
    @include breakpoint-up(sm) {
      #{$property}: space($sm);
    }
  }
  
  @if $md {
    @include breakpoint-up(md) {
      #{$property}: space($md);
    }
  }
  
  @if $lg {
    @include breakpoint-up(lg) {
      #{$property}: space($lg);
    }
  }
  
  @if $xl {
    @include breakpoint-up(xl) {
      #{$property}: space($xl);
    }
  }
}

@mixin responsive-gap($base: 4, $sm: null, $md: null, $lg: null, $xl: null) {
  gap: space($base);
  
  @if $sm {
    @include breakpoint-up(sm) {
      gap: space($sm);
    }
  }
  
  @if $md {
    @include breakpoint-up(md) {
      gap: space($md);
    }
  }
  
  @if $lg {
    @include breakpoint-up(lg) {
      gap: space($lg);
    }
  }
  
  @if $xl {
    @include breakpoint-up(xl) {
      gap: space($xl);
    }
  }
}

// Layout spacing mixins
@mixin layout-spacing($component: content) {
  @if $component == content {
    padding: var(--content-padding);
  } @else if $component == card {
    padding: var(--card-padding);
  } @else if $component == gap {
    gap: var(--gap-default);
  }
}

@mixin section-spacing($top: 8, $bottom: 8) {
  padding-top: space($top);
  padding-bottom: space($bottom);
  
  @include breakpoint(md) {
    padding-top: space($top - 2);
    padding-bottom: space($bottom - 2);
  }
  
  @include breakpoint(sm) {
    padding-top: space($top - 4);
    padding-bottom: space($bottom - 4);
  }
}

// Accessibility mixins
@mixin reduced-motion {
  @media (prefers-reduced-motion: reduce) {
    @content;
  }
}

@mixin high-contrast {
  @media (prefers-contrast: high) {
    @content;
  }
}