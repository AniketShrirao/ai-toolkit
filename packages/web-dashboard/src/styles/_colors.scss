// Color system with improved contrast ratios
// All colors meet WCAG 2.1 AA contrast requirements (4.5:1 minimum)

// Color palette maps
$colors: (
  primary: (
    50: #eff6ff,
    100: #dbeafe,
    200: #bfdbfe,
    300: #93c5fd,
    400: #60a5fa,
    500: #3b82f6,
    600: #2563eb,
    700: #1d4ed8,
    800: #1e40af,
    900: #1e3a8a
  ),
  secondary: (
    50: #f8fafc,
    100: #f1f5f9,
    200: #e2e8f0,
    300: #cbd5e1,
    400: #94a3b8,
    500: #64748b,
    600: #475569,
    700: #334155,
    800: #1e293b,
    900: #0f172a
  ),
  success: (
    50: #ecfdf5,
    100: #d1fae5,
    200: #a7f3d0,
    300: #6ee7b7,
    400: #34d399,
    500: #10b981,
    600: #059669,
    700: #047857,
    800: #065f46,
    900: #064e3b
  ),
  warning: (
    50: #fffbeb,
    100: #fef3c7,
    200: #fde68a,
    300: #fcd34d,
    400: #fbbf24,
    500: #f59e0b,
    600: #d97706,
    700: #b45309,
    800: #92400e,
    900: #78350f
  ),
  error: (
    50: #fef2f2,
    100: #fecaca,
    200: #fca5a5,
    300: #f87171,
    400: #ef4444,
    500: #dc2626,
    600: #b91c1c,
    700: #991b1b,
    800: #7f1d1d,
    900: #7c2d12
  ),
  info: (
    50: #eff6ff,
    100: #dbeafe,
    200: #bfdbfe,
    300: #93c5fd,
    400: #60a5fa,
    500: #3b82f6,
    600: #2563eb,
    700: #1d4ed8,
    800: #1e40af,
    900: #1e3a8a
  ),
  neutral: (
    50: #f8fafc,
    100: #f1f5f9,
    200: #e2e8f0,
    300: #cbd5e1,
    400: #94a3b8,
    500: #64748b,
    600: #475569,
    700: #334155,
    800: #1e293b,
    900: #0f172a
  )
);

// Color function to access palette values
@function color($name, $shade: 500) {
  @return map-get(map-get($colors, $name), $shade);
}

// Color contrast function to ensure accessibility
@function color-contrast($color, $light: #ffffff, $dark: #000000) {
  $color-brightness: (red($color) * 299 + green($color) * 587 + blue($color) * 114) / 1000;
  @return if($color-brightness > 128, $dark, $light);
}

// Function to get accessible text color for any background
@function text-on-color($bg-color) {
  @return color-contrast($bg-color, color(neutral, 900), #ffffff);
}

// Function to create color with alpha
@function color-alpha($name, $shade: 500, $alpha: 0.1) {
  @return rgba(color($name, $shade), $alpha);
}

// Function to get hover state color (darker shade)
@function color-hover($name, $shade: 500) {
  $hover-shade: $shade + 100;
  @if $hover-shade > 900 {
    $hover-shade: 900;
  }
  @return color($name, $hover-shade);
}

// Function to get active state color (even darker shade)
@function color-active($name, $shade: 500) {
  $active-shade: $shade + 200;
  @if $active-shade > 900 {
    $active-shade: 900;
  }
  @return color($name, $active-shade);
}

// Function to validate contrast ratio
@function contrast-ratio($color1, $color2) {
  $l1: luminance($color1);
  $l2: luminance($color2);
  @return if($l1 > $l2, ($l1 + 0.05) / ($l2 + 0.05), ($l2 + 0.05) / ($l1 + 0.05));
}

// Helper function to calculate luminance
@function luminance($color) {
  $red: red($color) / 255;
  $green: green($color) / 255;
  $blue: blue($color) / 255;
  
  $red: if($red <= 0.03928, $red / 12.92, pow(($red + 0.055) / 1.055, 2.4));
  $green: if($green <= 0.03928, $green / 12.92, pow(($green + 0.055) / 1.055, 2.4));
  $blue: if($blue <= 0.03928, $blue / 12.92, pow(($blue + 0.055) / 1.055, 2.4));
  
  @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
}

// Semantic color assignments with high contrast
$color-primary: color(primary, 600);
$color-primary-hover: color(primary, 700);
$color-primary-light: color(primary, 100);
$color-primary-dark: color(primary, 800);

$color-secondary: color(secondary, 600);
$color-secondary-hover: color(secondary, 700);
$color-secondary-light: color(secondary, 100);

// Enhanced status colors with multiple variants for different use cases
$color-success: color(success, 600);
$color-success-hover: color(success, 700);
$color-success-active: color(success, 800);
$color-success-light: color(success, 100);
$color-success-bg: color(success, 50);
$color-success-border: color(success, 300);
$color-success-text: color(success, 800);

$color-warning: color(warning, 600);
$color-warning-hover: color(warning, 700);
$color-warning-active: color(warning, 800);
$color-warning-light: color(warning, 100);
$color-warning-bg: color(warning, 50);
$color-warning-border: color(warning, 300);
$color-warning-text: color(warning, 800);

$color-error: color(error, 600);
$color-error-hover: color(error, 700);
$color-error-active: color(error, 800);
$color-error-light: color(error, 100);
$color-error-bg: color(error, 50);
$color-error-border: color(error, 300);
$color-error-text: color(error, 800);

$color-info: color(info, 600);
$color-info-hover: color(info, 700);
$color-info-active: color(info, 800);
$color-info-light: color(info, 100);
$color-info-bg: color(info, 50);
$color-info-border: color(info, 300);
$color-info-text: color(info, 800);

// Background colors
$bg-primary: #ffffff;
$bg-secondary: color(neutral, 50);
$bg-tertiary: color(neutral, 100);
$surface: #ffffff;

// Text colors with proper contrast ratios
$text-primary: color(neutral, 900);      // High contrast for main text
$text-secondary: color(neutral, 700);    // Medium contrast for secondary text
$text-tertiary: color(neutral, 600);     // Lower contrast for tertiary text
$text-disabled: color(neutral, 400);     // Disabled state text
$text-inverse: #ffffff;                  // Text on dark backgrounds

// Border colors
$border-primary: color(neutral, 200);
$border-secondary: color(neutral, 300);
$border-focus: color(primary, 500);

// CSS custom properties for runtime theming
:root {
  // Primary colors
  --primary: #{$color-primary};
  --primary-hover: #{$color-primary-hover};
  --primary-light: #{$color-primary-light};
  --primary-dark: #{$color-primary-dark};
  --primary-bg: #{$color-primary-light};
  --primary-alpha: #{rgba($color-primary, 0.1)};
  
  // Secondary colors
  --secondary: #{$color-secondary};
  --secondary-hover: #{$color-secondary-hover};
  --secondary-light: #{$color-secondary-light};
  
  // Background colors
  --bg-primary: #{$bg-primary};
  --bg-secondary: #{$bg-secondary};
  --bg-tertiary: #{$bg-tertiary};
  --background-color: #{$bg-secondary};
  --surface-color: #{$surface};
  --surface: #{$surface};
  
  // Text colors
  --text-primary: #{$text-primary};
  --text-secondary: #{$text-secondary};
  --text-tertiary: #{$text-tertiary};
  --text-disabled: #{$text-disabled};
  --text-inverse: #{$text-inverse};
  
  // Border colors
  --border: #{$border-primary};
  --border-color: #{$border-primary};
  --border-secondary: #{$border-secondary};
  --border-focus: #{$border-focus};
  
  // Enhanced status colors with multiple variants
  --success: #{$color-success};
  --success-hover: #{$color-success-hover};
  --success-active: #{$color-success-active};
  --success-light: #{$color-success-light};
  --success-bg: #{$color-success-bg};
  --success-border: #{$color-success-border};
  --success-text: #{$color-success-text};
  
  --warning: #{$color-warning};
  --warning-hover: #{$color-warning-hover};
  --warning-active: #{$color-warning-active};
  --warning-light: #{$color-warning-light};
  --warning-bg: #{$color-warning-bg};
  --warning-border: #{$color-warning-border};
  --warning-text: #{$color-warning-text};
  
  --error: #{$color-error};
  --error-hover: #{$color-error-hover};
  --error-active: #{$color-error-active};
  --error-light: #{$color-error-light};
  --error-bg: #{$color-error-bg};
  --error-border: #{$color-error-border};
  --error-text: #{$color-error-text};
  --error-alpha: #{rgba($color-error, 0.1)};
  
  --info: #{$color-info};
  --info-hover: #{$color-info-hover};
  --info-active: #{$color-info-active};
  --info-light: #{$color-info-light};
  --info-bg: #{$color-info-bg};
  --info-border: #{$color-info-border};
  --info-text: #{$color-info-text};
  
  // Legacy support for existing CSS
  --primary-color: #{$color-primary};
  --secondary-color: #{$color-secondary};
  --success-color: #{$color-success};
  --warning-color: #{$color-warning};
  --error-color: #{$color-error};
  
  // Additional alpha variants for overlays and subtle backgrounds
  --primary-alpha-10: #{color-alpha(primary, 600, 0.1)};
  --primary-alpha-20: #{color-alpha(primary, 600, 0.2)};
  --success-alpha-10: #{color-alpha(success, 600, 0.1)};
  --success-alpha-20: #{color-alpha(success, 600, 0.2)};
  --warning-alpha-10: #{color-alpha(warning, 600, 0.1)};
  --warning-alpha-20: #{color-alpha(warning, 600, 0.2)};
  --error-alpha-10: #{color-alpha(error, 600, 0.1)};
  --error-alpha-20: #{color-alpha(error, 600, 0.2)};
  --info-alpha-10: #{color-alpha(info, 600, 0.1)};
  --info-alpha-20: #{color-alpha(info, 600, 0.2)};
  
  // Neutral alpha variants
  --neutral-alpha-10: #{color-alpha(neutral, 500, 0.1)};
  --neutral-alpha-20: #{color-alpha(neutral, 500, 0.2)};
  --neutral-alpha-50: #{color-alpha(neutral, 500, 0.5)};
  
  // Interactive state colors
  --interactive-hover: #{color(neutral, 100)};
  --interactive-active: #{color(neutral, 200)};
  --interactive-disabled: #{color(neutral, 300)};
}

// Color utility mixins
@mixin text-color($variant: primary) {
  @if $variant == primary {
    color: var(--text-primary);
  } @else if $variant == secondary {
    color: var(--text-secondary);
  } @else if $variant == tertiary {
    color: var(--text-tertiary);
  } @else if $variant == disabled {
    color: var(--text-disabled);
  } @else if $variant == inverse {
    color: var(--text-inverse);
  } @else if $variant == success {
    color: var(--success);
  } @else if $variant == warning {
    color: var(--warning);
  } @else if $variant == error {
    color: var(--error);
  } @else if $variant == info {
    color: var(--info);
  }
}

@mixin bg-color($variant: primary) {
  @if $variant == primary {
    background-color: var(--bg-primary);
  } @else if $variant == secondary {
    background-color: var(--bg-secondary);
  } @else if $variant == tertiary {
    background-color: var(--bg-tertiary);
  } @else if $variant == surface {
    background-color: var(--surface);
  } @else if $variant == success {
    background-color: var(--success-bg);
  } @else if $variant == warning {
    background-color: var(--warning-bg);
  } @else if $variant == error {
    background-color: var(--error-bg);
  } @else if $variant == info {
    background-color: var(--info-bg);
  }
}

@mixin border-color($variant: primary) {
  @if $variant == primary {
    border-color: var(--border);
  } @else if $variant == secondary {
    border-color: var(--border-secondary);
  } @else if $variant == focus {
    border-color: var(--border-focus);
  } @else if $variant == success {
    border-color: var(--success);
  } @else if $variant == warning {
    border-color: var(--warning);
  } @else if $variant == error {
    border-color: var(--error);
  } @else if $variant == info {
    border-color: var(--info);
  }
}

// Color combination mixins for high contrast
@mixin color-scheme($scheme: default) {
  @if $scheme == success {
    @include text-color(success);
    @include bg-color(success);
    @include border-color(success);
  } @else if $scheme == warning {
    @include text-color(warning);
    @include bg-color(warning);
    @include border-color(warning);
  } @else if $scheme == error {
    @include text-color(error);
    @include bg-color(error);
    @include border-color(error);
  } @else if $scheme == info {
    @include text-color(info);
    @include bg-color(info);
    @include border-color(info);
  }
}

// Status color mixins with proper contrast
@mixin status-colors($status: default, $include-bg: true, $include-border: false) {
  @if $status == success {
    color: var(--success);
    @if $include-bg {
      background-color: var(--success-bg);
    }
    @if $include-border {
      border-color: var(--success);
    }
  } @else if $status == warning {
    color: var(--warning);
    @if $include-bg {
      background-color: var(--warning-bg);
    }
    @if $include-border {
      border-color: var(--warning);
    }
  } @else if $status == error {
    color: var(--error);
    @if $include-bg {
      background-color: var(--error-bg);
    }
    @if $include-border {
      border-color: var(--error);
    }
  } @else if $status == info {
    color: var(--info);
    @if $include-bg {
      background-color: var(--info-bg);
    }
    @if $include-border {
      border-color: var(--info);
    }
  }
}

// Interactive state color mixins
@mixin interactive-colors($base-color: var(--primary), $hover-color: var(--primary-hover), $active-color: var(--primary-dark)) {
  color: $base-color;
  
  &:hover:not(:disabled) {
    color: $hover-color;
  }
  
  &:active:not(:disabled) {
    color: $active-color;
  }
  
  &:focus {
    outline-color: $base-color;
  }
}

// Color utility classes for backgrounds
.bg-success-light { background-color: var(--success-bg); }
.bg-warning-light { background-color: var(--warning-bg); }
.bg-error-light { background-color: var(--error-bg); }
.bg-info-light { background-color: var(--info-bg); }

.bg-success-solid { background-color: var(--success); color: var(--text-inverse); }
.bg-warning-solid { background-color: var(--warning); color: var(--text-inverse); }
.bg-error-solid { background-color: var(--error); color: var(--text-inverse); }
.bg-info-solid { background-color: var(--info); color: var(--text-inverse); }

.bg-primary-light { background-color: var(--primary-light); }
.bg-primary-solid { background-color: var(--primary); color: var(--text-inverse); }
.bg-primary-alpha { background-color: var(--primary-alpha); }

// Border color utilities
.border-success { border-color: var(--success); }
.border-warning { border-color: var(--warning); }
.border-error { border-color: var(--error); }
.border-info { border-color: var(--info); }

// Interactive color utilities
.text-interactive {
  @include interactive-colors();
}

.text-success-interactive {
  @include interactive-colors(var(--success), var(--success-hover), var(--success));
}

.text-warning-interactive {
  @include interactive-colors(var(--warning), var(--warning-hover), var(--warning));
}

.text-error-interactive {
  @include interactive-colors(var(--error), var(--error-hover), var(--error));
}

.text-info-interactive {
  @include interactive-colors(var(--info), var(--info-hover), var(--info));
}

// High contrast mode support
@media (prefers-contrast: high) {
  :root {
    --text-primary: #{color(neutral, 900)};
    --text-secondary: #{color(neutral, 800)};
    --border: #{color(neutral, 400)};
    --border-secondary: #{color(neutral, 500)};
    
    // Enhanced contrast for status colors
    --success: #{color(success, 700)};
    --warning: #{color(warning, 700)};
    --error: #{color(error, 700)};
    --info: #{color(info, 700)};
  }
  
  // High contrast utility classes
  .text-primary { color: #{color(neutral, 900)} !important; }
  .text-secondary { color: #{color(neutral, 800)} !important; }
  .border { border-color: #{color(neutral, 500)} !important; }
  
  // Enhanced status color contrast
  .text-success { color: #{color(success, 800)} !important; }
  .text-warning { color: #{color(warning, 800)} !important; }
  .text-error { color: #{color(error, 800)} !important; }
  .text-info { color: #{color(info, 800)} !important; }
}