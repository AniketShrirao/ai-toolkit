import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Card, CardHeader, CardContent, Button } from '@components/UI';
import { ProgressBar } from '@components/UI/ProgressBar';
import { StatusIndicator } from '@components/UI/StatusIndicator';
import { useSettings } from '@hooks/useSettings';
export const SystemMonitoring = () => {
    const { health, refreshHealth } = useSettings();
    const formatUptime = (uptime) => {
        const seconds = Math.floor((Date.now() - uptime) / 1000);
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        return `${hours}h ${minutes}m`;
    };
    const getStatusColor = (value, thresholds) => {
        if (value >= thresholds.critical)
            return 'error';
        if (value >= thresholds.warning)
            return 'warning';
        return 'success';
    };
    if (!health) {
        return (_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx("h2", { children: "System Health" }) }), _jsx(CardContent, { children: _jsx("p", { children: "Loading system health information..." }) })] }));
    }
    return (_jsxs("div", { className: "space-y-4", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsx("h2", { children: "Ollama Status" }), _jsx(StatusIndicator, { status: health.ollama.connected ? 'connected' : 'disconnected', label: health.ollama.connected ? 'Connected' : 'Disconnected' })] }) }), _jsxs(CardContent, { children: [_jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { className: "metric-item", children: [_jsx("span", { className: "metric-label", children: "Version" }), _jsx("span", { className: "metric-value", children: health.ollama.version })] }), _jsxs("div", { className: "metric-item", children: [_jsx("span", { className: "metric-label", children: "Loaded Model" }), _jsx("span", { className: "metric-value", children: health.ollama.loadedModel || 'None' })] }), _jsxs("div", { className: "metric-item", children: [_jsx("span", { className: "metric-label", children: "Available Models" }), _jsx("span", { className: "metric-value", children: health.ollama.availableModels.length })] }), _jsxs("div", { className: "metric-item", children: [_jsx("span", { className: "metric-label", children: "Response Time" }), _jsxs("span", { className: "metric-value", children: [Math.round(health.ollama.responseTime), "ms"] })] })] }), _jsxs("div", { className: "mt-4", children: [_jsxs("div", { className: "flex items-center justify-between mb-2", children: [_jsx("span", { className: "metric-label", children: "Memory Usage" }), _jsxs("span", { className: "metric-value", children: [Math.round(health.ollama.memoryUsage), " MB"] })] }), _jsx(ProgressBar, { value: Math.min((health.ollama.memoryUsage / 4096) * 100, 100), variant: getStatusColor(health.ollama.memoryUsage, { warning: 2048, critical: 3072 }) })] })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx("h2", { children: "System Resources" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsxs("div", { className: "flex items-center justify-between mb-2", children: [_jsx("span", { className: "metric-label", children: "CPU Usage" }), _jsxs("span", { className: "metric-value", children: [Math.round(health.system.cpuUsage), "%"] })] }), _jsx(ProgressBar, { value: health.system.cpuUsage, variant: getStatusColor(health.system.cpuUsage, { warning: 70, critical: 90 }) })] }), _jsxs("div", { children: [_jsxs("div", { className: "flex items-center justify-between mb-2", children: [_jsx("span", { className: "metric-label", children: "Memory Usage" }), _jsxs("span", { className: "metric-value", children: [Math.round(health.system.memoryUsage), "%"] })] }), _jsx(ProgressBar, { value: health.system.memoryUsage, variant: getStatusColor(health.system.memoryUsage, { warning: 80, critical: 95 }) })] }), _jsxs("div", { children: [_jsxs("div", { className: "flex items-center justify-between mb-2", children: [_jsx("span", { className: "metric-label", children: "Disk Usage" }), _jsxs("span", { className: "metric-value", children: [Math.round(health.system.diskUsage), "%"] })] }), _jsx(ProgressBar, { value: health.system.diskUsage, variant: getStatusColor(health.system.diskUsage, { warning: 85, critical: 95 }) })] }), _jsxs("div", { className: "metric-item", children: [_jsx("span", { className: "metric-label", children: "System Uptime" }), _jsx("span", { className: "metric-value", children: formatUptime(health.system.uptime) })] })] }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx("h2", { children: "Processing Queue" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { className: "metric-item", children: [_jsx("span", { className: "metric-label", children: "Active Jobs" }), _jsx("span", { className: "metric-value text-blue-600", children: health.queue.activeJobs })] }), _jsxs("div", { className: "metric-item", children: [_jsx("span", { className: "metric-label", children: "Pending Jobs" }), _jsx("span", { className: "metric-value text-yellow-600", children: health.queue.pendingJobs })] }), _jsxs("div", { className: "metric-item", children: [_jsx("span", { className: "metric-label", children: "Completed Jobs" }), _jsx("span", { className: "metric-value text-green-600", children: health.queue.completedJobs })] }), _jsxs("div", { className: "metric-item", children: [_jsx("span", { className: "metric-label", children: "Failed Jobs" }), _jsx("span", { className: "metric-value text-red-600", children: health.queue.failedJobs })] })] }) })] }), _jsx("div", { className: "flex justify-end", children: _jsx(Button, { variant: "secondary", onClick: refreshHealth, children: "Refresh Status" }) })] }));
};
//# sourceMappingURL=SystemMonitoring.js.map